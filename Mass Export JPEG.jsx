//Version 1.1.1: quick and dirty version for mass export of JPEGs.  All lines from PDF version unnecessary for this purpose have been changed to remarks.  //      NOTE!!!  Currentnly the software seems to be unable to accommodate the export options.  Therefore, it will be necessary to do one JPEG export to set options before proceeding.//Version 1.1:   Corrected source folder selection to allow for folders with DM prefix./*Version 1.0:  Script for batch exporting PDFs for a large number of ID files mass-exported from Lago.  Includes the Export PDF script.//Version 0.4:  Added selection list for PDF types to complete script.//Version 0.3:  Export loop complete.//Version 0.2:  Separated export options dialogue and placed into main function (necessary for variable handling).//Version 0.1:  Ability to get subfolders from a user-selected source folder and return them into an array of folders.*/main();function main(){//Selects the files to be exported.     var fldrDefault = new Folder ("~/Desktop/");   //Sets the default for the folder selection to "Projects in Work."    Folder.current = fldrDefault;    var fldrRoot = fldrDefault.selectDlg ("Select folder");    var fldrsSourceFolders = fldrRoot.getFiles ("bp*");    if (fldrsSourceFolders.length == 0){        var fldrsSourceFolders = fldrRoot.getFiles ("dm*");        }        /*Operation is successful; however, sort is literal rather than numeric (i.e., 68,69,7,8, etc.)  May not matter;    page numbers shoudl be accurate as produced by Lago and are retreivable from the InDesign document properties, and can be used as the file label,    rather than the array/instance number (as previously planned.)*/         //Prompts the user for a filename, using the filename of the current .indd document as the placeholder, and sets options    //var strsPresets = new Array();    //var numPresets = app.pdfExportPresets.length;    //for (var numIndex = 0; numIndex < numPresets; numIndex++){       // strsPresets[numIndex] = app.pdfExportPresets[numIndex].name;        //}    var diaFileName = app.dialogs.add({		name: "Enter filename for Export",		canCancel:true		})	with (diaFileName){		with(dialogColumns.add()){			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel: "File name: "});					}				with(dialogColumns.add()){					var inpFileName = textEditboxes.add({						//editContents: "BP",						minWidth:240						});					staticTexts.add({staticLabel: "*Do NOT include an extension!"});					}				}//~             with(borderPanels.add()){//~                 with(dialogColumns.add()){//~                     staticTexts.add({staticLabel: "Select PDF Preset"});//~                     }//~                 with(dialogColumns.add()){//~                     var inpPreset = dropdowns.add({//~                         stringList: strsPresets,//~                         minWidth:240,//~                         selectedIndex:9//~                         });//~                     }//~                 }//~ 			with(borderPanels.add()){//~ 				with(dialogColumns.add()){//~ 					staticTexts.add({staticLabel: "Create Low res copy: "});//~ 					}//~ 				with(dialogColumns.add()){//~ 					var inpLowRes = checkboxControls.add();//~ 					}//~                   with(dialogColumns.add()){//~ 					staticTexts.add({staticLabel: "Add printer's marks: "});//~ 					}//~ 				with(dialogColumns.add()){//~ 					var inpMarks = checkboxControls.add();//~ 					}//~ 				}			}		}	if(diaFileName.show() == true) {		var strBaseName = inpFileName.editContents;//~          var numPreset = inpPreset.selectedIndex;//~ 		var boolDoLowRes= inpLowRes.checkedState;//~          var boolDoMarks = inpMarks.checkedState;		diaFileName.destroy();		}	else {		diaFileName.destroy();		}         //Executes the export function for each document in the selected array.    //app.pdfExportPreferences.viewPDF = false;   //Prevents Acrobat from opening the PDF file.    var numFolders = fldrsSourceFolders.length;    for (var numIndex = 0; numIndex < numFolders; numIndex++){        var fldrSource = fldrsSourceFolders[numIndex];        var fileSource = fldrSource.getFiles ("*.indd");        //app.open(File(fileSource));   //Can the following var statement be this defined by this command?  May allo opening invisibly.        var docSource = app.open(File(fileSource),false);        var pageSource = docSource.pages[0];        var strFileName = strBaseName + " " + pageSource.name;        var strExpPath = docSource.filePath.parent + "/";        if(numIndex == 0){            var boolOptionSet = true;            }        else {            var boolOptionSet = false;            }                    ExportProduct(docSource,strExpPath,strFileName,boolOptionSet);//~         if(boolDoLowRes == true){//~             ExportLowres (docSource,strExpPath,strFileName);//~             }//~         if(boolDoMarks == true){//~             ExportMarks (docSource,strExpPath,strFileName);//~             }        docSource.close(SaveOptions.no)        }//    app.pdfExportPreferences.viewPDF = true     //Restores the option to view the exported PDF.                     //Optional:  Add a "Job complete" window    }    //Creates the product file using the Export dialog.function ExportProduct(docSource,strExpPath,strFileName,boolOptionSet){	var strExportName = strExpPath + strFileName + ".jpg";    //var setPreset = app.pdfExportPresets.item(numPreset);	docSource.exportFile(        ExportFormat.JPG,        File(strExportName),        //true, //Boolean(boolOptionSet),           );	}	//Produces the low res version.function ExportLowres(docSource,strExpPath,strFileName){	var setPreset = app.pdfExportPresets.item("[Smallest File Size]");    var fldrParent = docSource.filePath.parent;    var strLowPath = fldrParent.fullName + "/lowres";    var fldrLowres = new Folder (strLowPath);    if(fldrLowres.resolve() == null){        fldrLowres.create();        }    var strExportName = strLowPath + "/" + strFileName + " lowres.pdf";	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		);	}//Produces a version with printer's marks.function ExportMarks(docSource,strExpPath,strFileName){	var setPreset = app.pdfExportPresets.item("300 dpi with bleed printer's marks");    var fldrParent = docSource.filePath.parent;    var strMarkPath = fldrParent.fullName + "/marks";    var fldrMarks = new Folder (strMarkPath);    if(fldrMarks.resolve() == null){        fldrMarks.create()        }     var strExportName = strMarkPath + "/" + strFileName + "_.pdf";	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		);	}//Ends the script if user cancels.//function CancelScript(){//	}	