//Version 1.0:  Script to first export the file to be shipped using the option dialog, then produce a low-res copy to be distributed as needed.//Version 1.1:  Added option and function to create PDF with printer's marks.//Version 1.2:  Added ability to organize low-res and marked files into subfolders.ExportPDF()//Begins by prompting the user for a filename, using the filename of the current .indd document as the placeholder.function ExportPDF(){	var docSource = app.activeDocument	var diaFileName = app.dialogs.add({		name: "Enter filename for Export",		canCancel:true		})	with (diaFileName){		with(dialogColumns.add()){			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel: "File name: "})					}				with(dialogColumns.add()){					var inpFileName = textEditboxes.add({						editContents: docSource.name,						minWidth:240						})					staticTexts.add({staticLabel: "*Do NOT include an extension!"})					}				}			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel: "Create Low res copy: "})					}				with(dialogColumns.add()){					var inpLowRes = checkboxControls.add({checkedState: true})					}                  with(dialogColumns.add()){					staticTexts.add({staticLabel: "Add printer's marks: "})					}				with(dialogColumns.add()){					var inpMarks = checkboxControls.add()					}				}			}		}	if(diaFileName.show() == true) {		var strFileName = inpFileName.editContents		var boolDoLowRes= inpLowRes.checkedState         var boolDoMarks = inpMarks.checkedState		diaFileName.destroy()		}	else {		diaFileName.destroy()		}	var strExpPath = docSource.filePath.parent + "/"	ExportProduct(docSource,strExpPath,strFileName)	if(boolDoLowRes == true){		ExportLowres (docSource,strExpPath,strFileName)		}    if(boolDoMarks == true){		ExportMarks (docSource,strExpPath,strFileName)		}	}//Creates the product file using the Export dialog.function ExportProduct(docSource,strExpPath,strFileName){	var strExportName = strExpPath + strFileName + ".pdf"	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		true,		)	}	//Produces the low res version.function ExportLowres(docSource,strExpPath,strFileName){	var setPreset = app.pdfExportPresets.item("[Smallest File Size]")	app.pdfExportPreferences.viewPDF = false //Prevents Acrobat from opening the low-res PDF file.    var fldrParent = docSource.filePath.parent    var strLowPath = fldrParent.fullName + "/lowres"    var fldrLowres = new Folder (strLowPath)    if(fldrLowres.resolve() == null){        fldrLowres.create()        }    var strExportName = strLowPath + "/" + strFileName + " lowres.pdf"	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		)	app.pdfExportPreferences.viewPDF = true //Restores the option to view the exported PDF.	}//Produces a version with printer's marks.function ExportMarks(docSource,strExpPath,strFileName){	var setPreset = app.pdfExportPresets.item("300 dpi with bleed printer's marks")	app.pdfExportPreferences.viewPDF = false //Prevents Acrobat from opening the marked PDF file.    var fldrParent = docSource.filePath.parent    var strMarkPath = fldrParent.fullName + "/marks"    var fldrMarks = new Folder (strMarkPath)    if(fldrMarks.resolve() == null){        fldrMarks.create()        }     var strExportName = strMarkPath + "/" + strFileName + "_.pdf"	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		)	app.pdfExportPreferences.viewPDF = true //Restores the option to view the exported PDF.	}//Ends the script if user cancels.//function CancelScript(){//	}	