//Version 2.1:  Combination of mass export page and variant versions into single combo script.  main();function main(){//Selects the files to be exported.     var fldrDefault = new Folder ("~/Desktop/");   //Sets the default for the folder selection to "Desktop."    Folder.current = fldrDefault;    var fldrRoot = fldrDefault.selectDlg ("Select folder");    var fldrsVariantFolders = fldrRoot.getFiles (function(f) { return f instanceof Folder; });          /*Operation is successful; however, sort is literal rather than numeric (i.e., 68,69,7,8, etc.)  May not matter;    page numbers shoudl be accurate as produced by Lago and are retreivable from the InDesign document properties, and can be used as the file label,    rather than the array/instance number (as previously planned.)*/         //Prompts the user for a filename, using the filename of the current .indd document as the placeholder, and sets options    var strsPresets = new Array();    var numPresets = app.pdfExportPresets.length;    for (var numIndex = 0; numIndex < numPresets; numIndex++){        strsPresets[numIndex] = app.pdfExportPresets[numIndex].name;        }    var diaFileName = app.dialogs.add({		name: "Enter filename for Export",		canCancel:true		})	with (diaFileName){		with(dialogColumns.add()){			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel: "File name: "});					}				with(dialogColumns.add()){					var inpFileName = textEditboxes.add({						//editContents: "BP",						minWidth:240						});					staticTexts.add({staticLabel: "*Do NOT include an extension!"});					}				}            with(borderPanels.add()){                with(dialogColumns.add()){                    staticTexts.add({staticLabel: "Select PDF Preset"});                    }                with(dialogColumns.add()){                    var inpPreset = dropdowns.add({                        stringList: strsPresets,                        minWidth:240,                        selectedIndex:9                        });                    }                }			with(borderPanels.add()){				with(dialogColumns.add()){					staticTexts.add({staticLabel: "Create Low res copy: "});					}				with(dialogColumns.add()){					var inpLowRes = checkboxControls.add();					}                  with(dialogColumns.add()){					staticTexts.add({staticLabel: "Add printer's marks: "});					}				with(dialogColumns.add()){					var inpMarks = checkboxControls.add();					}				}			}		}	if(diaFileName.show() == true) {		var strBaseName = inpFileName.editContents;         var numPreset = inpPreset.selectedIndex;		var boolDoLowRes= inpLowRes.checkedState;         var boolDoMarks = inpMarks.checkedState;		diaFileName.destroy();		}	else {		diaFileName.destroy();		}         //Executes the export function for each document in the selected array.    app.pdfExportPreferences.viewPDF = false;   //Prevents Acrobat from opening the PDF file.    var numVariants = fldrsVariantFolders.length;    var isOnePage = false    for (var numIndex = 0; numIndex < numVariants; numIndex++){            var fldrVariant = fldrsVariantFolders[numIndex];                    var strVariant = " " + fldrVariant.name;             if(strVariant.substr(1,2) == "BP" || strVariant.substr(1,2) == "DM"){                 var fldrsPageFolders = fldrsVariantFolders;                numIndex = numVariants;                strVariant = "";                }            else {                               var fldrsPageFolders = fldrVariant.getFiles (function(f) { return f instanceof Folder; });                }            var numPages = fldrsPageFolders.length            if(numIndex == 0){                if(numPages == 1){                    isOnePage = true;                    }                }            for (var numPageIndex = 0; numPageIndex < numPages; numPageIndex++){                    var fldrPage = fldrsPageFolders[numPageIndex];                                    var fileSource = fldrPage.getFiles ("*.indd");                    var docSource = app.open(File(fileSource),false);                    var pageSource = docSource.pages[0];                     if(isOnePage == true) {                        var strPage = "";                        }                    else {                        var strPage = " " + pageSource.name;                        }                    var strFileName = strBaseName + strPage + strVariant;                    var strExpPath = fldrVariant.parent + "/";       //needs to be one level higher so they are collated                     ExportProduct(docSource,strExpPath,strFileName,numPreset);                    if(boolDoLowRes == true){                        ExportLowres (docSource,strExpPath,strFileName);                        }                    if(boolDoMarks == true){                        ExportMarks (docSource,strExpPath,strFileName);                        }                    docSource.close(SaveOptions.no)                                    }                    }    app.pdfExportPreferences.viewPDF = true     //Restores the option to view the exported PDF.                     //Optional:  Add a "Job complete" window    }    //Creates the product file using the Export dialog.function ExportProduct(docSource,strExpPath,strFileName,numPreset){	var strExportName = strExpPath + strFileName + ".pdf";    var setPreset = app.pdfExportPresets.item(numPreset);	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,         setPreset		);	}	//Produces the low res version.function ExportLowres(docSource,strExpPath,strFileName){    var setPreset = app.pdfExportPresets.item("[Smallest File Size]");    var strLowPath = strExpPath + "/lowres";    var fldrLowres = new Folder (strLowPath);    if(fldrLowres.resolve() == null){        fldrLowres.create();        }    var strExportName = strLowPath + "/" + strFileName + " lowres.pdf";	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		);	}//Produces a version with printer's marks.function ExportMarks(docSource,strExpPath,strFileName){    var setPreset = app.pdfExportPresets.item("300 dpi with bleed printer's marks");    var strMarkPath = strExpPath + "/marks";    var fldrMarks = new Folder (strMarkPath);    if(fldrMarks.resolve() == null){        fldrMarks.create()        }     var strExportName = strMarkPath + "/" + strFileName + "_.pdf";	docSource.exportFile(		ExportFormat.pdfType,		File(strExportName),		false,		setPreset		);	}//Ends the script if user cancels.//function CancelScript(){//	}	